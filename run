#!/usr/bin/env python3.6
"""Commands necessaries to define a run script that will acts as entrypoint for Docker. This script will provide a
common interface to run the application, tests and utils.
"""
import argparse
import asyncio
import json
import os
import shlex
import sys
from typing import List

from aiokafka import AIOKafkaConsumer, AIOKafkaProducer
from clinner.command import Type as CommandType, command
from clinner.run import HealthCheckMixin, Main

# Binaries
PYTHON = 'python3.6'
COVERAGE = 'coverage'
PROSPECTOR = 'prospector'
HEALTH_CHECK = 'health_check'
PYTEST = 'pytest'

# Constants
DEFAULT_KAFKA_BOOTSTRAP_SERVER = 'kafka:9002'


# Commands
@command(command_type=CommandType.PYTHON)
def app(*args, **kwargs):
    from tasks.flights import FlightsTask

    FlightsTask().run()


@command(command_type=CommandType.SHELL)
def shell(*args, **kwargs) -> List[List[str]]:
    cmd = shlex.split(f'ipython')
    cmd += args
    return [cmd]


@command(command_type=CommandType.SHELL)
def unit_tests(*args, **kwargs) -> List[List[str]]:
    coverage_erase = shlex.split(f'{COVERAGE} erase')
    tests = [PYTEST] + list(args)
    return [coverage_erase, tests]


@command(command_type=CommandType.SHELL)
def prospector(*args, **kwargs) -> List[List[str]]:
    cmd = [PROSPECTOR]
    cmd += args
    return [cmd]


@command(args=((('topic',), {'help': 'Kafka topic'}),
               (('--bootstrap-servers',),
                {'help': 'Kafka bootstrap servers', 'default': DEFAULT_KAFKA_BOOTSTRAP_SERVER}),),
         parser_opts={'help': 'Command line kafka producer'})
def kafka_producer(*args, **kwargs):
    loop = asyncio.get_event_loop()

    async def _produce(topic, asyncio_loop):
        producer = AIOKafkaProducer(loop=asyncio_loop, bootstrap_servers=kwargs['bootstrap_servers'],
                                    value_serializer=lambda x: str(x).encode('utf-8'), request_timeout_ms=3000, metadata_max_age_ms=3000)
        await producer.start()
        raw_message = input()
        try:
            while raw_message:
                await producer.send_and_wait(topic, raw_message)
                raw_message = input()
        except KeyboardInterrupt:
            pass
        finally:
            await producer.stop()

    loop.run_until_complete(_produce(kwargs['topic'], loop))


@command(args=((('topic',), {'help': 'Kafka topic', 'nargs': '+'}),
               (('--bootstrap-servers',),
                {'help': 'Kafka bootstrap servers', 'default': DEFAULT_KAFKA_BOOTSTRAP_SERVER}),
               (('-g', '--group-id'), {'help': 'Consumer group ID', 'default': 'group_id'})),
         parser_opts={'help': 'Command line kafka consumer'})
def kafka_consumer(*args, **kwargs):
    loop = asyncio.get_event_loop()

    async def _consume(topics, asyncio_loop, group_id):
        consumer = AIOKafkaConsumer(*topics, loop=asyncio_loop, bootstrap_servers=kwargs['bootstrap_servers'],
                                    group_id=group_id, value_deserializer=str)
        await consumer.start()
        try:
            async for msg in consumer:
                print(msg.value)
        except KeyboardInterrupt:
            pass
        finally:
            consumer.stop()

    loop.run_until_complete(_consume(kwargs['topic'], loop, kwargs['group_id']))


@command(command_type=CommandType.SHELL)
def health_check(*args, **kwargs) -> List[List[str]]:
    """
    """
    hc = ['health_check']
    hc += args
    return [hc]


# Main
class Main(HealthCheckMixin, Main):
    commands = (
        'app',
        'shell',
        'unit_tests',
        'prospector',
        'kafka_producer',
        'kafka_consumer',
        'health_check',
    )

    def add_arguments(self, parser: argparse.ArgumentParser):
        parser.add_argument('-s', '--settings', default='flights_analyzer.settings:Settings', help='Settings class')

    def inject_app_settings(self):
        """
        Injecting own settings.
        """
        os.environ['APP_SETTINGS'] = self.settings
        os.environ['HEALTH_CHECK_SETTINGS'] = self.settings

    def health_check(self):
        """
        Check for availability of external dependencies, such as the celery broker.
        :return: True if healthy, False otherwise.
        """
        # TODO: Create a HC
        return True


if __name__ == '__main__':
    main = Main()
    sys.exit(main.run())
